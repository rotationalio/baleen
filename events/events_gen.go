package events

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Document) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "etag":
			z.ETag, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ETag")
				return
			}
		case "last_modified":
			z.LastModified, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LastModified")
				return
			}
		case "active":
			z.Active, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Active")
				return
			}
		case "status_code":
			z.StatusCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "error":
			z.Error, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "fetched_at":
			z.FetchedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "FetchedAt")
				return
			}
		case "feed_id":
			z.FeedID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FeedID")
				return
			}
		case "language":
			z.Language, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Language")
				return
			}
		case "year":
			z.Year, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Year")
				return
			}
		case "month":
			z.Month, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Month")
				return
			}
		case "day":
			z.Day, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Day")
				return
			}
		case "title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "description":
			z.Description, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "content":
			z.Content, err = dc.ReadBytes(z.Content)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "encoding":
			z.Encoding, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Encoding")
				return
			}
		case "link":
			z.Link, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Document) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 16
	// write "etag"
	err = en.Append(0xde, 0x0, 0x10, 0xa4, 0x65, 0x74, 0x61, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.ETag)
	if err != nil {
		err = msgp.WrapError(err, "ETag")
		return
	}
	// write "last_modified"
	err = en.Append(0xad, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.LastModified)
	if err != nil {
		err = msgp.WrapError(err, "LastModified")
		return
	}
	// write "active"
	err = en.Append(0xa6, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Active)
	if err != nil {
		err = msgp.WrapError(err, "Active")
		return
	}
	// write "status_code"
	err = en.Append(0xab, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StatusCode)
	if err != nil {
		err = msgp.WrapError(err, "StatusCode")
		return
	}
	// write "error"
	err = en.Append(0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Error)
	if err != nil {
		err = msgp.WrapError(err, "Error")
		return
	}
	// write "fetched_at"
	err = en.Append(0xaa, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.FetchedAt)
	if err != nil {
		err = msgp.WrapError(err, "FetchedAt")
		return
	}
	// write "feed_id"
	err = en.Append(0xa7, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.FeedID)
	if err != nil {
		err = msgp.WrapError(err, "FeedID")
		return
	}
	// write "language"
	err = en.Append(0xa8, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Language)
	if err != nil {
		err = msgp.WrapError(err, "Language")
		return
	}
	// write "year"
	err = en.Append(0xa4, 0x79, 0x65, 0x61, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Year)
	if err != nil {
		err = msgp.WrapError(err, "Year")
		return
	}
	// write "month"
	err = en.Append(0xa5, 0x6d, 0x6f, 0x6e, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Month)
	if err != nil {
		err = msgp.WrapError(err, "Month")
		return
	}
	// write "day"
	err = en.Append(0xa3, 0x64, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Day)
	if err != nil {
		err = msgp.WrapError(err, "Day")
		return
	}
	// write "title"
	err = en.Append(0xa5, 0x74, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "description"
	err = en.Append(0xab, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		err = msgp.WrapError(err, "Description")
		return
	}
	// write "content"
	err = en.Append(0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Content)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	// write "encoding"
	err = en.Append(0xa8, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Encoding)
	if err != nil {
		err = msgp.WrapError(err, "Encoding")
		return
	}
	// write "link"
	err = en.Append(0xa4, 0x6c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.Link)
	if err != nil {
		err = msgp.WrapError(err, "Link")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Document) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 16
	// string "etag"
	o = append(o, 0xde, 0x0, 0x10, 0xa4, 0x65, 0x74, 0x61, 0x67)
	o = msgp.AppendString(o, z.ETag)
	// string "last_modified"
	o = append(o, 0xad, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64)
	o = msgp.AppendString(o, z.LastModified)
	// string "active"
	o = append(o, 0xa6, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65)
	o = msgp.AppendBool(o, z.Active)
	// string "status_code"
	o = append(o, 0xab, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.StatusCode)
	// string "error"
	o = append(o, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Error)
	// string "fetched_at"
	o = append(o, 0xaa, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74)
	o = msgp.AppendTime(o, z.FetchedAt)
	// string "feed_id"
	o = append(o, 0xa7, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.FeedID)
	// string "language"
	o = append(o, 0xa8, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Language)
	// string "year"
	o = append(o, 0xa4, 0x79, 0x65, 0x61, 0x72)
	o = msgp.AppendInt(o, z.Year)
	// string "month"
	o = append(o, 0xa5, 0x6d, 0x6f, 0x6e, 0x74, 0x68)
	o = msgp.AppendString(o, z.Month)
	// string "day"
	o = append(o, 0xa3, 0x64, 0x61, 0x79)
	o = msgp.AppendInt(o, z.Day)
	// string "title"
	o = append(o, 0xa5, 0x74, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "description"
	o = append(o, 0xab, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "content"
	o = append(o, 0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	o = msgp.AppendBytes(o, z.Content)
	// string "encoding"
	o = append(o, 0xa8, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67)
	o = msgp.AppendString(o, z.Encoding)
	// string "link"
	o = append(o, 0xa4, 0x6c, 0x69, 0x6e, 0x6b)
	o = msgp.AppendString(o, z.Link)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Document) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "etag":
			z.ETag, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ETag")
				return
			}
		case "last_modified":
			z.LastModified, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastModified")
				return
			}
		case "active":
			z.Active, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Active")
				return
			}
		case "status_code":
			z.StatusCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "error":
			z.Error, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "fetched_at":
			z.FetchedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FetchedAt")
				return
			}
		case "feed_id":
			z.FeedID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeedID")
				return
			}
		case "language":
			z.Language, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Language")
				return
			}
		case "year":
			z.Year, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Year")
				return
			}
		case "month":
			z.Month, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Month")
				return
			}
		case "day":
			z.Day, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Day")
				return
			}
		case "title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "content":
			z.Content, bts, err = msgp.ReadBytesBytes(bts, z.Content)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "encoding":
			z.Encoding, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Encoding")
				return
			}
		case "link":
			z.Link, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Document) Msgsize() (s int) {
	s = 3 + 5 + msgp.StringPrefixSize + len(z.ETag) + 14 + msgp.StringPrefixSize + len(z.LastModified) + 7 + msgp.BoolSize + 12 + msgp.IntSize + 6 + msgp.StringPrefixSize + len(z.Error) + 11 + msgp.TimeSize + 8 + msgp.StringPrefixSize + len(z.FeedID) + 9 + msgp.StringPrefixSize + len(z.Language) + 5 + msgp.IntSize + 6 + msgp.StringPrefixSize + len(z.Month) + 4 + msgp.IntSize + 6 + msgp.StringPrefixSize + len(z.Title) + 12 + msgp.StringPrefixSize + len(z.Description) + 8 + msgp.BytesPrefixSize + len(z.Content) + 9 + msgp.StringPrefixSize + len(z.Encoding) + 5 + msgp.StringPrefixSize + len(z.Link)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FeedItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "feed_id":
			z.FeedID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FeedID")
				return
			}
		case "title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "description":
			z.Description, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "content":
			z.Content, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "link":
			z.Link, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		case "updated":
			z.Updated, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Updated")
				return
			}
		case "published":
			z.Published, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Published")
				return
			}
		case "guid":
			z.GUID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GUID")
				return
			}
		case "authors":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Authors")
				return
			}
			if cap(z.Authors) >= int(zb0002) {
				z.Authors = (z.Authors)[:zb0002]
			} else {
				z.Authors = make([]string, zb0002)
			}
			for za0001 := range z.Authors {
				z.Authors[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Authors", za0001)
					return
				}
			}
		case "image":
			z.Image, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Image")
				return
			}
		case "categories":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Categories")
				return
			}
			if cap(z.Categories) >= int(zb0003) {
				z.Categories = (z.Categories)[:zb0003]
			} else {
				z.Categories = make([]string, zb0003)
			}
			for za0002 := range z.Categories {
				z.Categories[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Categories", za0002)
					return
				}
			}
		case "enclosures":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Enclosures")
				return
			}
			if cap(z.Enclosures) >= int(zb0004) {
				z.Enclosures = (z.Enclosures)[:zb0004]
			} else {
				z.Enclosures = make([]string, zb0004)
			}
			for za0003 := range z.Enclosures {
				z.Enclosures[za0003], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Enclosures", za0003)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FeedItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 12
	// write "feed_id"
	err = en.Append(0x8c, 0xa7, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.FeedID)
	if err != nil {
		err = msgp.WrapError(err, "FeedID")
		return
	}
	// write "title"
	err = en.Append(0xa5, 0x74, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "description"
	err = en.Append(0xab, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		err = msgp.WrapError(err, "Description")
		return
	}
	// write "content"
	err = en.Append(0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Content)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	// write "link"
	err = en.Append(0xa4, 0x6c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.Link)
	if err != nil {
		err = msgp.WrapError(err, "Link")
		return
	}
	// write "updated"
	err = en.Append(0xa7, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Updated)
	if err != nil {
		err = msgp.WrapError(err, "Updated")
		return
	}
	// write "published"
	err = en.Append(0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Published)
	if err != nil {
		err = msgp.WrapError(err, "Published")
		return
	}
	// write "guid"
	err = en.Append(0xa4, 0x67, 0x75, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.GUID)
	if err != nil {
		err = msgp.WrapError(err, "GUID")
		return
	}
	// write "authors"
	err = en.Append(0xa7, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Authors)))
	if err != nil {
		err = msgp.WrapError(err, "Authors")
		return
	}
	for za0001 := range z.Authors {
		err = en.WriteString(z.Authors[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Authors", za0001)
			return
		}
	}
	// write "image"
	err = en.Append(0xa5, 0x69, 0x6d, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Image)
	if err != nil {
		err = msgp.WrapError(err, "Image")
		return
	}
	// write "categories"
	err = en.Append(0xaa, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Categories)))
	if err != nil {
		err = msgp.WrapError(err, "Categories")
		return
	}
	for za0002 := range z.Categories {
		err = en.WriteString(z.Categories[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Categories", za0002)
			return
		}
	}
	// write "enclosures"
	err = en.Append(0xaa, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Enclosures)))
	if err != nil {
		err = msgp.WrapError(err, "Enclosures")
		return
	}
	for za0003 := range z.Enclosures {
		err = en.WriteString(z.Enclosures[za0003])
		if err != nil {
			err = msgp.WrapError(err, "Enclosures", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FeedItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 12
	// string "feed_id"
	o = append(o, 0x8c, 0xa7, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.FeedID)
	// string "title"
	o = append(o, 0xa5, 0x74, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "description"
	o = append(o, 0xab, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "content"
	o = append(o, 0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Content)
	// string "link"
	o = append(o, 0xa4, 0x6c, 0x69, 0x6e, 0x6b)
	o = msgp.AppendString(o, z.Link)
	// string "updated"
	o = append(o, 0xa7, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64)
	o = msgp.AppendString(o, z.Updated)
	// string "published"
	o = append(o, 0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64)
	o = msgp.AppendString(o, z.Published)
	// string "guid"
	o = append(o, 0xa4, 0x67, 0x75, 0x69, 0x64)
	o = msgp.AppendString(o, z.GUID)
	// string "authors"
	o = append(o, 0xa7, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Authors)))
	for za0001 := range z.Authors {
		o = msgp.AppendString(o, z.Authors[za0001])
	}
	// string "image"
	o = append(o, 0xa5, 0x69, 0x6d, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Image)
	// string "categories"
	o = append(o, 0xaa, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Categories)))
	for za0002 := range z.Categories {
		o = msgp.AppendString(o, z.Categories[za0002])
	}
	// string "enclosures"
	o = append(o, 0xaa, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Enclosures)))
	for za0003 := range z.Enclosures {
		o = msgp.AppendString(o, z.Enclosures[za0003])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FeedItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "feed_id":
			z.FeedID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeedID")
				return
			}
		case "title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "content":
			z.Content, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "link":
			z.Link, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		case "updated":
			z.Updated, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Updated")
				return
			}
		case "published":
			z.Published, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Published")
				return
			}
		case "guid":
			z.GUID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GUID")
				return
			}
		case "authors":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Authors")
				return
			}
			if cap(z.Authors) >= int(zb0002) {
				z.Authors = (z.Authors)[:zb0002]
			} else {
				z.Authors = make([]string, zb0002)
			}
			for za0001 := range z.Authors {
				z.Authors[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Authors", za0001)
					return
				}
			}
		case "image":
			z.Image, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Image")
				return
			}
		case "categories":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Categories")
				return
			}
			if cap(z.Categories) >= int(zb0003) {
				z.Categories = (z.Categories)[:zb0003]
			} else {
				z.Categories = make([]string, zb0003)
			}
			for za0002 := range z.Categories {
				z.Categories[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Categories", za0002)
					return
				}
			}
		case "enclosures":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enclosures")
				return
			}
			if cap(z.Enclosures) >= int(zb0004) {
				z.Enclosures = (z.Enclosures)[:zb0004]
			} else {
				z.Enclosures = make([]string, zb0004)
			}
			for za0003 := range z.Enclosures {
				z.Enclosures[za0003], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Enclosures", za0003)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FeedItem) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.FeedID) + 6 + msgp.StringPrefixSize + len(z.Title) + 12 + msgp.StringPrefixSize + len(z.Description) + 8 + msgp.StringPrefixSize + len(z.Content) + 5 + msgp.StringPrefixSize + len(z.Link) + 8 + msgp.StringPrefixSize + len(z.Updated) + 10 + msgp.StringPrefixSize + len(z.Published) + 5 + msgp.StringPrefixSize + len(z.GUID) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Authors {
		s += msgp.StringPrefixSize + len(z.Authors[za0001])
	}
	s += 6 + msgp.StringPrefixSize + len(z.Image) + 11 + msgp.ArrayHeaderSize
	for za0002 := range z.Categories {
		s += msgp.StringPrefixSize + len(z.Categories[za0002])
	}
	s += 11 + msgp.ArrayHeaderSize
	for za0003 := range z.Enclosures {
		s += msgp.StringPrefixSize + len(z.Enclosures[za0003])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FeedSync) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "feed_id":
			z.FeedID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FeedID")
				return
			}
		case "etag":
			z.ETag, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ETag")
				return
			}
		case "last_modified":
			z.LastModified, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LastModified")
				return
			}
		case "active":
			z.Active, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Active")
				return
			}
		case "status_code":
			z.StatusCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "error":
			z.Error, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "synced_at":
			z.SyncedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "SyncedAt")
				return
			}
		case "feed_items":
			z.FeedItems, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "FeedItems")
				return
			}
		case "title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "description":
			z.Description, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "link":
			z.Link, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		case "links":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Links")
				return
			}
			if cap(z.Links) >= int(zb0002) {
				z.Links = (z.Links)[:zb0002]
			} else {
				z.Links = make([]string, zb0002)
			}
			for za0001 := range z.Links {
				z.Links[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Links", za0001)
					return
				}
			}
		case "feed_link":
			z.FeedLink, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FeedLink")
				return
			}
		case "updated":
			z.Updated, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Updated")
				return
			}
		case "published":
			z.Published, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Published")
				return
			}
		case "language":
			z.Language, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Language")
				return
			}
		case "copyright":
			z.Copyright, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Copyright")
				return
			}
		case "generator":
			z.Generator, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Generator")
				return
			}
		case "categories":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Categories")
				return
			}
			if cap(z.Categories) >= int(zb0003) {
				z.Categories = (z.Categories)[:zb0003]
			} else {
				z.Categories = make([]string, zb0003)
			}
			for za0002 := range z.Categories {
				z.Categories[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Categories", za0002)
					return
				}
			}
		case "feed_type":
			z.FeedType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FeedType")
				return
			}
		case "feed_version":
			z.FeedVersion, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FeedVersion")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FeedSync) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 21
	// write "feed_id"
	err = en.Append(0xde, 0x0, 0x15, 0xa7, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.FeedID)
	if err != nil {
		err = msgp.WrapError(err, "FeedID")
		return
	}
	// write "etag"
	err = en.Append(0xa4, 0x65, 0x74, 0x61, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.ETag)
	if err != nil {
		err = msgp.WrapError(err, "ETag")
		return
	}
	// write "last_modified"
	err = en.Append(0xad, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.LastModified)
	if err != nil {
		err = msgp.WrapError(err, "LastModified")
		return
	}
	// write "active"
	err = en.Append(0xa6, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Active)
	if err != nil {
		err = msgp.WrapError(err, "Active")
		return
	}
	// write "status_code"
	err = en.Append(0xab, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StatusCode)
	if err != nil {
		err = msgp.WrapError(err, "StatusCode")
		return
	}
	// write "error"
	err = en.Append(0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Error)
	if err != nil {
		err = msgp.WrapError(err, "Error")
		return
	}
	// write "synced_at"
	err = en.Append(0xa9, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.SyncedAt)
	if err != nil {
		err = msgp.WrapError(err, "SyncedAt")
		return
	}
	// write "feed_items"
	err = en.Append(0xaa, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.FeedItems)
	if err != nil {
		err = msgp.WrapError(err, "FeedItems")
		return
	}
	// write "title"
	err = en.Append(0xa5, 0x74, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "description"
	err = en.Append(0xab, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		err = msgp.WrapError(err, "Description")
		return
	}
	// write "link"
	err = en.Append(0xa4, 0x6c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.Link)
	if err != nil {
		err = msgp.WrapError(err, "Link")
		return
	}
	// write "links"
	err = en.Append(0xa5, 0x6c, 0x69, 0x6e, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Links)))
	if err != nil {
		err = msgp.WrapError(err, "Links")
		return
	}
	for za0001 := range z.Links {
		err = en.WriteString(z.Links[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Links", za0001)
			return
		}
	}
	// write "feed_link"
	err = en.Append(0xa9, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.FeedLink)
	if err != nil {
		err = msgp.WrapError(err, "FeedLink")
		return
	}
	// write "updated"
	err = en.Append(0xa7, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Updated)
	if err != nil {
		err = msgp.WrapError(err, "Updated")
		return
	}
	// write "published"
	err = en.Append(0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Published)
	if err != nil {
		err = msgp.WrapError(err, "Published")
		return
	}
	// write "language"
	err = en.Append(0xa8, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Language)
	if err != nil {
		err = msgp.WrapError(err, "Language")
		return
	}
	// write "copyright"
	err = en.Append(0xa9, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Copyright)
	if err != nil {
		err = msgp.WrapError(err, "Copyright")
		return
	}
	// write "generator"
	err = en.Append(0xa9, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Generator)
	if err != nil {
		err = msgp.WrapError(err, "Generator")
		return
	}
	// write "categories"
	err = en.Append(0xaa, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Categories)))
	if err != nil {
		err = msgp.WrapError(err, "Categories")
		return
	}
	for za0002 := range z.Categories {
		err = en.WriteString(z.Categories[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Categories", za0002)
			return
		}
	}
	// write "feed_type"
	err = en.Append(0xa9, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FeedType)
	if err != nil {
		err = msgp.WrapError(err, "FeedType")
		return
	}
	// write "feed_version"
	err = en.Append(0xac, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.FeedVersion)
	if err != nil {
		err = msgp.WrapError(err, "FeedVersion")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FeedSync) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 21
	// string "feed_id"
	o = append(o, 0xde, 0x0, 0x15, 0xa7, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.FeedID)
	// string "etag"
	o = append(o, 0xa4, 0x65, 0x74, 0x61, 0x67)
	o = msgp.AppendString(o, z.ETag)
	// string "last_modified"
	o = append(o, 0xad, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64)
	o = msgp.AppendString(o, z.LastModified)
	// string "active"
	o = append(o, 0xa6, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65)
	o = msgp.AppendBool(o, z.Active)
	// string "status_code"
	o = append(o, 0xab, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.StatusCode)
	// string "error"
	o = append(o, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Error)
	// string "synced_at"
	o = append(o, 0xa9, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74)
	o = msgp.AppendTime(o, z.SyncedAt)
	// string "feed_items"
	o = append(o, 0xaa, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73)
	o = msgp.AppendInt64(o, z.FeedItems)
	// string "title"
	o = append(o, 0xa5, 0x74, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "description"
	o = append(o, 0xab, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "link"
	o = append(o, 0xa4, 0x6c, 0x69, 0x6e, 0x6b)
	o = msgp.AppendString(o, z.Link)
	// string "links"
	o = append(o, 0xa5, 0x6c, 0x69, 0x6e, 0x6b, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Links)))
	for za0001 := range z.Links {
		o = msgp.AppendString(o, z.Links[za0001])
	}
	// string "feed_link"
	o = append(o, 0xa9, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b)
	o = msgp.AppendString(o, z.FeedLink)
	// string "updated"
	o = append(o, 0xa7, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64)
	o = msgp.AppendString(o, z.Updated)
	// string "published"
	o = append(o, 0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64)
	o = msgp.AppendString(o, z.Published)
	// string "language"
	o = append(o, 0xa8, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Language)
	// string "copyright"
	o = append(o, 0xa9, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendString(o, z.Copyright)
	// string "generator"
	o = append(o, 0xa9, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Generator)
	// string "categories"
	o = append(o, 0xaa, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Categories)))
	for za0002 := range z.Categories {
		o = msgp.AppendString(o, z.Categories[za0002])
	}
	// string "feed_type"
	o = append(o, 0xa9, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.FeedType)
	// string "feed_version"
	o = append(o, 0xac, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.FeedVersion)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FeedSync) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "feed_id":
			z.FeedID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeedID")
				return
			}
		case "etag":
			z.ETag, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ETag")
				return
			}
		case "last_modified":
			z.LastModified, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastModified")
				return
			}
		case "active":
			z.Active, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Active")
				return
			}
		case "status_code":
			z.StatusCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "error":
			z.Error, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "synced_at":
			z.SyncedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SyncedAt")
				return
			}
		case "feed_items":
			z.FeedItems, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeedItems")
				return
			}
		case "title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "link":
			z.Link, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Link")
				return
			}
		case "links":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Links")
				return
			}
			if cap(z.Links) >= int(zb0002) {
				z.Links = (z.Links)[:zb0002]
			} else {
				z.Links = make([]string, zb0002)
			}
			for za0001 := range z.Links {
				z.Links[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Links", za0001)
					return
				}
			}
		case "feed_link":
			z.FeedLink, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeedLink")
				return
			}
		case "updated":
			z.Updated, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Updated")
				return
			}
		case "published":
			z.Published, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Published")
				return
			}
		case "language":
			z.Language, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Language")
				return
			}
		case "copyright":
			z.Copyright, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Copyright")
				return
			}
		case "generator":
			z.Generator, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Generator")
				return
			}
		case "categories":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Categories")
				return
			}
			if cap(z.Categories) >= int(zb0003) {
				z.Categories = (z.Categories)[:zb0003]
			} else {
				z.Categories = make([]string, zb0003)
			}
			for za0002 := range z.Categories {
				z.Categories[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Categories", za0002)
					return
				}
			}
		case "feed_type":
			z.FeedType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeedType")
				return
			}
		case "feed_version":
			z.FeedVersion, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeedVersion")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FeedSync) Msgsize() (s int) {
	s = 3 + 8 + msgp.StringPrefixSize + len(z.FeedID) + 5 + msgp.StringPrefixSize + len(z.ETag) + 14 + msgp.StringPrefixSize + len(z.LastModified) + 7 + msgp.BoolSize + 12 + msgp.IntSize + 6 + msgp.StringPrefixSize + len(z.Error) + 10 + msgp.TimeSize + 11 + msgp.Int64Size + 6 + msgp.StringPrefixSize + len(z.Title) + 12 + msgp.StringPrefixSize + len(z.Description) + 5 + msgp.StringPrefixSize + len(z.Link) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Links {
		s += msgp.StringPrefixSize + len(z.Links[za0001])
	}
	s += 10 + msgp.StringPrefixSize + len(z.FeedLink) + 8 + msgp.StringPrefixSize + len(z.Updated) + 10 + msgp.StringPrefixSize + len(z.Published) + 9 + msgp.StringPrefixSize + len(z.Language) + 10 + msgp.StringPrefixSize + len(z.Copyright) + 10 + msgp.StringPrefixSize + len(z.Generator) + 11 + msgp.ArrayHeaderSize
	for za0002 := range z.Categories {
		s += msgp.StringPrefixSize + len(z.Categories[za0002])
	}
	s += 10 + msgp.StringPrefixSize + len(z.FeedType) + 13 + msgp.StringPrefixSize + len(z.FeedVersion)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Subscription) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "feed_id":
			z.FeedID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FeedID")
				return
			}
		case "title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "feed_type":
			z.FeedType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FeedType")
				return
			}
		case "feed_url":
			z.FeedURL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FeedURL")
				return
			}
		case "site_url":
			z.SiteURL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SiteURL")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Subscription) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "feed_id"
	err = en.Append(0x85, 0xa7, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.FeedID)
	if err != nil {
		err = msgp.WrapError(err, "FeedID")
		return
	}
	// write "title"
	err = en.Append(0xa5, 0x74, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "feed_type"
	err = en.Append(0xa9, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FeedType)
	if err != nil {
		err = msgp.WrapError(err, "FeedType")
		return
	}
	// write "feed_url"
	err = en.Append(0xa8, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.FeedURL)
	if err != nil {
		err = msgp.WrapError(err, "FeedURL")
		return
	}
	// write "site_url"
	err = en.Append(0xa8, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.SiteURL)
	if err != nil {
		err = msgp.WrapError(err, "SiteURL")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Subscription) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "feed_id"
	o = append(o, 0x85, 0xa7, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.FeedID)
	// string "title"
	o = append(o, 0xa5, 0x74, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "feed_type"
	o = append(o, 0xa9, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.FeedType)
	// string "feed_url"
	o = append(o, 0xa8, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c)
	o = msgp.AppendString(o, z.FeedURL)
	// string "site_url"
	o = append(o, 0xa8, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c)
	o = msgp.AppendString(o, z.SiteURL)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Subscription) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "feed_id":
			z.FeedID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeedID")
				return
			}
		case "title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "feed_type":
			z.FeedType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeedType")
				return
			}
		case "feed_url":
			z.FeedURL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeedURL")
				return
			}
		case "site_url":
			z.SiteURL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SiteURL")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Subscription) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.FeedID) + 6 + msgp.StringPrefixSize + len(z.Title) + 10 + msgp.StringPrefixSize + len(z.FeedType) + 9 + msgp.StringPrefixSize + len(z.FeedURL) + 9 + msgp.StringPrefixSize + len(z.SiteURL)
	return
}
